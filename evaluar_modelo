from ultralytics import YOLO
import torch

# Verificar si CUDA est치 disponible
def main():   
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    print(f"Using device: {device}")
    
    # Cargar el modelo
    
    model = YOLO(r"C:\Users\Manuel\Desktop\Carpeta Visual\Sistema-De-Conteo-De-Ganado\EntrenarYolov8\BestNuestrasX.pt").to(device)
    # Especificar la ruta del archivo de configuraci칩n para la validaci칩n
    data_config = r"C:\Users\Manuel\Desktop\Carpeta Visual\Sistema-De-Conteo-De-Ganado\EntrenarYolov8\config2.yaml"
    
    # Validar el modelo usando el conjunto de validaci칩n
    metrics = model.val(data=data_config, split='val') # val
    boxMap5095Val = metrics.box.map
    boxMap50Val = metrics.box.map50
    boxMap75Val = metrics.box.map75
    
    # Validar el modelo usando el conjunto de entrenamiento
    model = YOLO(r"C:\Users\Manuel\Desktop\Carpeta Visual\Sistema-De-Conteo-De-Ganado\EntrenarYolov8\BestNuestrasN.pt").to(device)
    metrics = model.val(data=data_config, split='train') # train
    boxMap5095T = metrics.box.map
    boxMap50T = metrics.box.map50
    boxMap75T = metrics.box.map75
    
    # Imprimir los resultados
    print("mAP50-95 Nano: " + str(boxMap5095T) + " mAP50-95 XL: " + str(boxMap5095Val))
    print("mAP50 Nano: " + str(boxMap50T) + " mAP50 XL: " + str(boxMap50Val))
    print("mAP75 Nano: " + str(boxMap75T) + " mAP75 XL: " + str(boxMap75Val))

if __name__ == '__main__':
    main()
